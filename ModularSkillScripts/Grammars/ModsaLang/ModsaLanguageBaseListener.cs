//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /media/glitch/ExtraWorld/repos/ModularSkillScripts repos/ModularSkillScripts/Grammars/ModsaLanguage.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ModsaLang {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IModsaLanguageListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class ModsaLanguageBaseListener : IModsaLanguageListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ModsaLanguageParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] ModsaLanguageParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModsaLanguageParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] ModsaLanguageParser.ProgramContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AddSubExpression</c>
	/// labeled alternative in <see cref="ModsaLanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddSubExpression([NotNull] ModsaLanguageParser.AddSubExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AddSubExpression</c>
	/// labeled alternative in <see cref="ModsaLanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddSubExpression([NotNull] ModsaLanguageParser.AddSubExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>FunctionExpression</c>
	/// labeled alternative in <see cref="ModsaLanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionExpression([NotNull] ModsaLanguageParser.FunctionExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>FunctionExpression</c>
	/// labeled alternative in <see cref="ModsaLanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionExpression([NotNull] ModsaLanguageParser.FunctionExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenExpression</c>
	/// labeled alternative in <see cref="ModsaLanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenExpression([NotNull] ModsaLanguageParser.ParenExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenExpression</c>
	/// labeled alternative in <see cref="ModsaLanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenExpression([NotNull] ModsaLanguageParser.ParenExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NumberExpression</c>
	/// labeled alternative in <see cref="ModsaLanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumberExpression([NotNull] ModsaLanguageParser.NumberExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NumberExpression</c>
	/// labeled alternative in <see cref="ModsaLanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumberExpression([NotNull] ModsaLanguageParser.NumberExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>VariableExpression</c>
	/// labeled alternative in <see cref="ModsaLanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableExpression([NotNull] ModsaLanguageParser.VariableExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>VariableExpression</c>
	/// labeled alternative in <see cref="ModsaLanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableExpression([NotNull] ModsaLanguageParser.VariableExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MulDivExpression</c>
	/// labeled alternative in <see cref="ModsaLanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMulDivExpression([NotNull] ModsaLanguageParser.MulDivExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MulDivExpression</c>
	/// labeled alternative in <see cref="ModsaLanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMulDivExpression([NotNull] ModsaLanguageParser.MulDivExpressionContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace ModsaLang
