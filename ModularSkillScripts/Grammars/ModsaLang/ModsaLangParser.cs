//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /media/glitch/ExtraWorld/repos/ModularSkillScripts repos/ModularSkillScripts/Grammars/ModsaLang.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ModsaLang {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class ModsaLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, MODVAL=3, ID=4, NUMBER=5, WS=6, ADD=7, SUB=8, MUL=9, DIV=10, 
		MAX=11, MIN=12;
	public const int
		RULE_program = 0, RULE_expression = 1;
	public static readonly string[] ruleNames = {
		"program", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", null, null, null, null, "'+'", "'-'", "'*'", "'/'", 
		"'\\u00A1'", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "MODVAL", "ID", "NUMBER", "WS", "ADD", "SUB", "MUL", 
		"DIV", "MAX", "MIN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ModsaLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ModsaLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ModsaLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ModsaLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ModsaLangParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModsaLangListener typedListener = listener as IModsaLangListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModsaLangListener typedListener = listener as IModsaLangListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModsaLangVisitor<TResult> typedVisitor = visitor as IModsaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4;
			expression(0);
			State = 5;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableExContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ModsaLangParser.ID, 0); }
		public VariableExContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModsaLangListener typedListener = listener as IModsaLangListener;
			if (typedListener != null) typedListener.EnterVariableEx(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModsaLangListener typedListener = listener as IModsaLangListener;
			if (typedListener != null) typedListener.ExitVariableEx(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModsaLangVisitor<TResult> typedVisitor = visitor as IModsaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableEx(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetModvalExContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODVAL() { return GetToken(ModsaLangParser.MODVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SetModvalExContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModsaLangListener typedListener = listener as IModsaLangListener;
			if (typedListener != null) typedListener.EnterSetModvalEx(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModsaLangListener typedListener = listener as IModsaLangListener;
			if (typedListener != null) typedListener.ExitSetModvalEx(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModsaLangVisitor<TResult> typedVisitor = visitor as IModsaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetModvalEx(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberExContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ModsaLangParser.NUMBER, 0); }
		public NumberExContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModsaLangListener typedListener = listener as IModsaLangListener;
			if (typedListener != null) typedListener.EnterNumberEx(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModsaLangListener typedListener = listener as IModsaLangListener;
			if (typedListener != null) typedListener.ExitNumberEx(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModsaLangVisitor<TResult> typedVisitor = visitor as IModsaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberEx(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CircleExContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CircleExContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModsaLangListener typedListener = listener as IModsaLangListener;
			if (typedListener != null) typedListener.EnterCircleEx(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModsaLangListener typedListener = listener as IModsaLangListener;
			if (typedListener != null) typedListener.ExitCircleEx(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModsaLangVisitor<TResult> typedVisitor = visitor as IModsaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCircleEx(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionExContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ModsaLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionExContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModsaLangListener typedListener = listener as IModsaLangListener;
			if (typedListener != null) typedListener.EnterFunctionEx(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModsaLangListener typedListener = listener as IModsaLangListener;
			if (typedListener != null) typedListener.ExitFunctionEx(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModsaLangVisitor<TResult> typedVisitor = visitor as IModsaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionEx(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MathExContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(ModsaLangParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(ModsaLangParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(ModsaLangParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(ModsaLangParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(ModsaLangParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(ModsaLangParser.MIN, 0); }
		public MathExContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModsaLangListener typedListener = listener as IModsaLangListener;
			if (typedListener != null) typedListener.EnterMathEx(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModsaLangListener typedListener = listener as IModsaLangListener;
			if (typedListener != null) typedListener.ExitMathEx(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModsaLangVisitor<TResult> typedVisitor = visitor as IModsaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathEx(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModvalExContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODVAL() { return GetToken(ModsaLangParser.MODVAL, 0); }
		public ModvalExContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModsaLangListener typedListener = listener as IModsaLangListener;
			if (typedListener != null) typedListener.EnterModvalEx(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModsaLangListener typedListener = listener as IModsaLangListener;
			if (typedListener != null) typedListener.ExitModvalEx(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModsaLangVisitor<TResult> typedVisitor = visitor as IModsaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModvalEx(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				_localctx = new CircleExContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 8;
				Match(T__0);
				State = 9;
				expression(0);
				State = 10;
				Match(T__1);
				}
				break;
			case 2:
				{
				_localctx = new SetModvalExContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 12;
				Match(MODVAL);
				State = 13;
				Match(T__0);
				State = 14;
				expression(0);
				State = 15;
				Match(T__1);
				}
				break;
			case 3:
				{
				_localctx = new FunctionExContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 17;
				Match(ID);
				State = 18;
				Match(T__0);
				State = 19;
				expression(0);
				State = 20;
				Match(T__1);
				}
				break;
			case 4:
				{
				_localctx = new NumberExContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 22;
				Match(NUMBER);
				}
				break;
			case 5:
				{
				_localctx = new ModvalExContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 23;
				Match(MODVAL);
				}
				break;
			case 6:
				{
				_localctx = new VariableExContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 24;
				Match(ID);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 32;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MathExContext(new ExpressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 27;
					if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
					State = 28;
					((MathExContext)_localctx).op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8064L) != 0)) ) {
						((MathExContext)_localctx).op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 29;
					expression(7);
					}
					} 
				}
				State = 34;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,12,36,2,0,7,0,2,1,7,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,26,8,1,1,1,1,1,1,1,5,1,31,
		8,1,10,1,12,1,34,9,1,1,1,0,1,2,2,0,2,0,1,1,0,7,12,39,0,4,1,0,0,0,2,25,
		1,0,0,0,4,5,3,2,1,0,5,6,5,0,0,1,6,1,1,0,0,0,7,8,6,1,-1,0,8,9,5,1,0,0,9,
		10,3,2,1,0,10,11,5,2,0,0,11,26,1,0,0,0,12,13,5,3,0,0,13,14,5,1,0,0,14,
		15,3,2,1,0,15,16,5,2,0,0,16,26,1,0,0,0,17,18,5,4,0,0,18,19,5,1,0,0,19,
		20,3,2,1,0,20,21,5,2,0,0,21,26,1,0,0,0,22,26,5,5,0,0,23,26,5,3,0,0,24,
		26,5,4,0,0,25,7,1,0,0,0,25,12,1,0,0,0,25,17,1,0,0,0,25,22,1,0,0,0,25,23,
		1,0,0,0,25,24,1,0,0,0,26,32,1,0,0,0,27,28,10,6,0,0,28,29,7,0,0,0,29,31,
		3,2,1,7,30,27,1,0,0,0,31,34,1,0,0,0,32,30,1,0,0,0,32,33,1,0,0,0,33,3,1,
		0,0,0,34,32,1,0,0,0,2,25,32
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace ModsaLang
