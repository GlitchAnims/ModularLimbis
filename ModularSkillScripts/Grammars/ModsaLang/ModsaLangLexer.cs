//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /media/glitch/ExtraWorld/repos/ModularSkillScripts repos/ModularSkillScripts/Grammars/ModsaLang.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ModsaLang {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class ModsaLangLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, MODVAL=3, ID=4, NUMBER=5, WS=6, ADD=7, SUB=8, MUL=9, DIV=10, 
		MAX=11, MIN=12;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "MODVAL", "ID", "NUMBER", "WS", "ADD", "SUB", "MUL", "DIV", 
		"MAX", "MIN"
	};


	public ModsaLangLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ModsaLangLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", null, null, null, null, "'+'", "'-'", "'*'", "'/'", 
		"'\\u00A1'", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "MODVAL", "ID", "NUMBER", "WS", "ADD", "SUB", "MUL", 
		"DIV", "MAX", "MIN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ModsaLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ModsaLangLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,12,78,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,1,1,1,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,4,2,38,8,2,11,2,12,2,39,1,3,4,3,43,8,3,11,3,12,3,
		44,1,4,4,4,48,8,4,11,4,12,4,49,1,4,1,4,4,4,54,8,4,11,4,12,4,55,3,4,58,
		8,4,1,5,4,5,61,8,5,11,5,12,5,62,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,
		9,1,10,1,10,1,11,1,11,0,0,12,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
		10,21,11,23,12,1,0,3,1,0,48,57,2,0,65,90,97,122,3,0,9,10,13,13,32,32,83,
		0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,1,25,1,0,0,0,3,27,1,0,0,0,5,29,1,0,0,0,7,42,1,0,0,0,9,47,1,0,0,
		0,11,60,1,0,0,0,13,66,1,0,0,0,15,68,1,0,0,0,17,70,1,0,0,0,19,72,1,0,0,
		0,21,74,1,0,0,0,23,76,1,0,0,0,25,26,5,40,0,0,26,2,1,0,0,0,27,28,5,41,0,
		0,28,4,1,0,0,0,29,30,5,86,0,0,30,31,5,65,0,0,31,32,5,76,0,0,32,33,5,85,
		0,0,33,34,5,69,0,0,34,35,5,95,0,0,35,37,1,0,0,0,36,38,7,0,0,0,37,36,1,
		0,0,0,38,39,1,0,0,0,39,37,1,0,0,0,39,40,1,0,0,0,40,6,1,0,0,0,41,43,7,1,
		0,0,42,41,1,0,0,0,43,44,1,0,0,0,44,42,1,0,0,0,44,45,1,0,0,0,45,8,1,0,0,
		0,46,48,7,0,0,0,47,46,1,0,0,0,48,49,1,0,0,0,49,47,1,0,0,0,49,50,1,0,0,
		0,50,57,1,0,0,0,51,53,5,46,0,0,52,54,7,0,0,0,53,52,1,0,0,0,54,55,1,0,0,
		0,55,53,1,0,0,0,55,56,1,0,0,0,56,58,1,0,0,0,57,51,1,0,0,0,57,58,1,0,0,
		0,58,10,1,0,0,0,59,61,7,2,0,0,60,59,1,0,0,0,61,62,1,0,0,0,62,60,1,0,0,
		0,62,63,1,0,0,0,63,64,1,0,0,0,64,65,6,5,0,0,65,12,1,0,0,0,66,67,5,43,0,
		0,67,14,1,0,0,0,68,69,5,45,0,0,69,16,1,0,0,0,70,71,5,42,0,0,71,18,1,0,
		0,0,72,73,5,47,0,0,73,20,1,0,0,0,74,75,5,161,0,0,75,22,1,0,0,0,76,77,5,
		33,0,0,77,24,1,0,0,0,7,0,39,44,49,55,57,62,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace ModsaLang
